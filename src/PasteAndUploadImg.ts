export const listenPasteAndUploadImg = () => {
  //   document.addEventListener("paste", handlePaste);
  //   return;
  document.addEventListener("paste", async (event) => {
    const items = event.clipboardData?.items as any;
    const uploadStatus = document.getElementById("upload-status");
    console.log("mstodo:items", items);
    for (let item of items) {
      if (item.kind === "file") {
        const file = item.getAsFile();
        if (file && file.type.startsWith("image/")) {
          // 图片文件被粘贴，执行上传
          const formData = new FormData();
          const jsonMetadata = JSON.stringify({ Name: file.name });

          formData.append("jsonMetadata", jsonMetadata);
          formData.append("attachment", file);

          try {
            const urlTasks = "https://substrate.office.com/todob2/api/v1/tasks";
            const tasksId = localStorage
              .getItem("updated:tasks")
              ?.split(":")
              .at(-1);
            const syncToken = JSON.parse(
              localStorage.getItem("todo-auth-context") || ""
            ).syncToken;
            const userId = localStorage.getItem("user_id");
            if (!tasksId) return;

            // -----------------------------send request-----------------------------
            const response = await fetch(`${urlTasks}/${tasksId}/attachments`, {
              method: "POST",
              headers: {
                accept: "*/*",
                authorization: `Bearer ${syncToken}`, // 这里替换为你的授权令牌变量
                "sec-ch-ua":
                  '"Chromium";v="128", "Not;A=Brand";v="24", "Google Chrome";v="128"',
                "sec-ch-ua-mobile": "?0",
                "sec-ch-ua-platform": '"Windows"',
                "sec-fetch-dest": "empty",
                "sec-fetch-mode": "cors",
                "sec-fetch-site": "cross-site",
                "x-anchormailbox": `CID:${userId}`,
              },
              body: formData,
              mode: "cors",
              credentials: "include",
            });

            const data = await response.json();
            if (response.ok && data.Id) {
              // 假设返回的文件地址在 data.fileUrl
              let id = data.Id;
              id = id
                .replaceAll(`-`, `%2F`)
                .replaceAll(`_`, `%2B`)
                .replaceAll(`=`, `%3D`);
              let tasksId = localStorage
                .getItem("updated:tasks")
                ?.split(":")
                .at(-1);
              tasksId = tasksId
                ?.replaceAll(`-`, `%2F`)
                .replaceAll(`_`, `%2B`)
                .replaceAll(`=`, `%3D`);

              if (!tasksId) return;

              const previewURL = `https://outlook.live.com/mail/0/deeplink/attachment/${tasksId}/${id}/false`;
              console.log("mstodo:previewURL", previewURL);
              // TODO: There is no way to continue, cause image download url is dynamic generated by some dynamic token, and iframe is specified by CSP

              console.log("mstodo:response", data);
              const markdownImg = `![${file.name}](${data.fileUrl})`;

              // 通过 Clipboard API 将 markdown 文本写入到剪贴板
              await navigator.clipboard.writeText(markdownImg);

              // 粘贴 markdown 文本
              document.execCommand("insertText", false, markdownImg);

              uploadStatus && (uploadStatus.textContent = "Upload successful!");
            } else {
              uploadStatus && (uploadStatus.textContent = "Upload failed!");
              console.error("Upload failed with response:", data);
            }
          } catch (error) {
            uploadStatus && (uploadStatus.textContent = "Upload failed!");
            console.error("Error:", error);
          }
        }
      }
    }
  });
};

export const listenPasteImg = () => {
  document.addEventListener("paste", (event: ClipboardEvent) => {
    const items = event.clipboardData?.items;

    if (!items) return;

    for (let i = 0; i < items.length; i++) {
      const item = items[i];

      if (item.type.indexOf("image") !== -1) {
        const blob = item.getAsFile();

        if (blob) {
          const reader = new FileReader();

          reader.onload = (e: ProgressEvent<FileReader>) => {
            const base64Image = e.target?.result as string;
            const markdownImage = `![Image](${base64Image})`;

            // 插入 Markdown 图片链接到当前光标位置
            insertMarkdownAtCursor(markdownImage);
          };

          reader.readAsDataURL(blob);
        }
      }
    }
  });

  function insertMarkdownAtCursor(markdown: string): void {
    const activeElement = document.activeElement as HTMLElement;

    if (activeElement.tagName === 'TEXTAREA' || activeElement.tagName === 'INPUT') {
        const inputElement = activeElement as HTMLTextAreaElement | HTMLInputElement;
        const start = inputElement.selectionStart || 0;
        const end = inputElement.selectionEnd || 0;
        const text = inputElement.value;
        
        inputElement.value = text.slice(0, start) + markdown + text.slice(end);
        inputElement.selectionStart = inputElement.selectionEnd = start + markdown.length;
    } else if (activeElement.isContentEditable) {
        const selection = window.getSelection();

        if (selection && selection.rangeCount > 0) {
            const range = selection.getRangeAt(0);
            range.deleteContents();

            const markdownNode = document.createTextNode(markdown);
            range.insertNode(markdownNode);

            // 将光标移至插入内容的末尾
            range.setStartAfter(markdownNode);
            range.setEndAfter(markdownNode);
            selection.removeAllRanges();
            selection.addRange(range);
        }
    }
}

};
